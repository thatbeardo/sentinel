// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	neo4j "github.com/neo4j/neo4j-go-driver/neo4j"
	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// BeginTransaction provides a mock function with given fields: configurers
func (_m *Session) BeginTransaction(configurers ...func(*neo4j.TransactionConfig)) (neo4j.Transaction, error) {
	_va := make([]interface{}, len(configurers))
	for _i := range configurers {
		_va[_i] = configurers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 neo4j.Transaction
	if rf, ok := ret.Get(0).(func(...func(*neo4j.TransactionConfig)) neo4j.Transaction); ok {
		r0 = rf(configurers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...func(*neo4j.TransactionConfig)) error); ok {
		r1 = rf(configurers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Session) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LastBookmark provides a mock function with given fields:
func (_m *Session) LastBookmark() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadTransaction provides a mock function with given fields: work, configurers
func (_m *Session) ReadTransaction(work neo4j.TransactionWork, configurers ...func(*neo4j.TransactionConfig)) (interface{}, error) {
	_va := make([]interface{}, len(configurers))
	for _i := range configurers {
		_va[_i] = configurers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, work)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(neo4j.TransactionWork, ...func(*neo4j.TransactionConfig)) interface{}); ok {
		r0 = rf(work, configurers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(neo4j.TransactionWork, ...func(*neo4j.TransactionConfig)) error); ok {
		r1 = rf(work, configurers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields: cypher, params, configurers
func (_m *Session) Run(cypher string, params map[string]interface{}, configurers ...func(*neo4j.TransactionConfig)) (neo4j.Result, error) {
	_va := make([]interface{}, len(configurers))
	for _i := range configurers {
		_va[_i] = configurers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cypher, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 neo4j.Result
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}, ...func(*neo4j.TransactionConfig)) neo4j.Result); ok {
		r0 = rf(cypher, params, configurers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}, ...func(*neo4j.TransactionConfig)) error); ok {
		r1 = rf(cypher, params, configurers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteTransaction provides a mock function with given fields: work, configurers
func (_m *Session) WriteTransaction(work neo4j.TransactionWork, configurers ...func(*neo4j.TransactionConfig)) (interface{}, error) {
	_va := make([]interface{}, len(configurers))
	for _i := range configurers {
		_va[_i] = configurers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, work)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(neo4j.TransactionWork, ...func(*neo4j.TransactionConfig)) interface{}); ok {
		r0 = rf(work, configurers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(neo4j.TransactionWork, ...func(*neo4j.TransactionConfig)) error); ok {
		r1 = rf(work, configurers...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
