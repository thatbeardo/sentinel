// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	neo4j "github.com/neo4j/neo4j-go-driver/neo4j"
	mock "github.com/stretchr/testify/mock"
)

// Result is an autogenerated mock type for the Result type
type Result struct {
	mock.Mock
}

// Consume provides a mock function with given fields:
func (_m *Result) Consume() (neo4j.ResultSummary, error) {
	ret := _m.Called()

	var r0 neo4j.ResultSummary
	if rf, ok := ret.Get(0).(func() neo4j.ResultSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.ResultSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Err provides a mock function with given fields:
func (_m *Result) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Keys provides a mock function with given fields:
func (_m *Result) Keys() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Next provides a mock function with given fields:
func (_m *Result) Next() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Record provides a mock function with given fields:
func (_m *Result) Record() neo4j.Record {
	ret := _m.Called()

	var r0 neo4j.Record
	if rf, ok := ret.Get(0).(func() neo4j.Record); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.Record)
		}
	}

	return r0
}

// Summary provides a mock function with given fields:
func (_m *Result) Summary() (neo4j.ResultSummary, error) {
	ret := _m.Called()

	var r0 neo4j.ResultSummary
	if rf, ok := ret.Get(0).(func() neo4j.ResultSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.ResultSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
