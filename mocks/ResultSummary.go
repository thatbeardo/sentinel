// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	neo4j "github.com/neo4j/neo4j-go-driver/neo4j"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ResultSummary is an autogenerated mock type for the ResultSummary type
type ResultSummary struct {
	mock.Mock
}

// Counters provides a mock function with given fields:
func (_m *ResultSummary) Counters() neo4j.Counters {
	ret := _m.Called()

	var r0 neo4j.Counters
	if rf, ok := ret.Get(0).(func() neo4j.Counters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.Counters)
		}
	}

	return r0
}

// Notifications provides a mock function with given fields:
func (_m *ResultSummary) Notifications() []neo4j.Notification {
	ret := _m.Called()

	var r0 []neo4j.Notification
	if rf, ok := ret.Get(0).(func() []neo4j.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]neo4j.Notification)
		}
	}

	return r0
}

// Plan provides a mock function with given fields:
func (_m *ResultSummary) Plan() neo4j.Plan {
	ret := _m.Called()

	var r0 neo4j.Plan
	if rf, ok := ret.Get(0).(func() neo4j.Plan); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.Plan)
		}
	}

	return r0
}

// Profile provides a mock function with given fields:
func (_m *ResultSummary) Profile() neo4j.ProfiledPlan {
	ret := _m.Called()

	var r0 neo4j.ProfiledPlan
	if rf, ok := ret.Get(0).(func() neo4j.ProfiledPlan); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.ProfiledPlan)
		}
	}

	return r0
}

// ResultAvailableAfter provides a mock function with given fields:
func (_m *ResultSummary) ResultAvailableAfter() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// ResultConsumedAfter provides a mock function with given fields:
func (_m *ResultSummary) ResultConsumedAfter() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Server provides a mock function with given fields:
func (_m *ResultSummary) Server() neo4j.ServerInfo {
	ret := _m.Called()

	var r0 neo4j.ServerInfo
	if rf, ok := ret.Get(0).(func() neo4j.ServerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.ServerInfo)
		}
	}

	return r0
}

// Statement provides a mock function with given fields:
func (_m *ResultSummary) Statement() neo4j.Statement {
	ret := _m.Called()

	var r0 neo4j.Statement
	if rf, ok := ret.Get(0).(func() neo4j.Statement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(neo4j.Statement)
		}
	}

	return r0
}

// StatementType provides a mock function with given fields:
func (_m *ResultSummary) StatementType() neo4j.StatementType {
	ret := _m.Called()

	var r0 neo4j.StatementType
	if rf, ok := ret.Get(0).(func() neo4j.StatementType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(neo4j.StatementType)
	}

	return r0
}
